<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/05/02/Linux%20%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
      <url>2021/05/02/Linux%20%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-学习之路"><a href="#Linux-学习之路" class="headerlink" title="Linux 学习之路"></a>Linux 学习之路</h1><h2 id="1-配置网络"><a href="#1-配置网络" class="headerlink" title="1.配置网络"></a>1.配置网络</h2><p>配置主机名： <code>vi /etc/sysconfig/network</code> ， 修改<code>HOSTNAME=node01</code> 。</p><p>配置网络：到  <code>/etc/sysconfig/network-scripts/</code>  下修改 <code>ifcfg-eth0</code> 文件。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543321660241.png" alt="1543321660241"></p><p>主动配置， 需要删除 <code>/etc/udev/rules.d/70-persistent-net.rules</code> ,  以下是该文件的内容：</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543322092630.png" alt="1543322092630"></p><p>重启， 这样一台机器的网络就配置完成。</p><h2 id="2-配置克隆"><a href="#2-配置克隆" class="headerlink" title="2.配置克隆"></a>2.配置克隆</h2><p>对已经配置好的机器进行克隆， 完成多台机器的网络配置。</p><p>网络配置如1所示。</p><h2 id="3-简单命令"><a href="#3-简单命令" class="headerlink" title="3.简单命令"></a>3.简单命令</h2><p><code>type</code> ：被用于判断一个命令是否是内置命令。</p><p>如：<code>type ifconfig</code> ， 可以查看到该命令的位置。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543390891824.png" alt="1543390891824"></p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543392122498.png" alt="1543392122498"></p><p>通过 <code>man yum</code> 可以查看yum帮助手册。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543392202098.png" alt="1543392202098"></p><p>通过<code>help cd</code> 查看内部命令的帮助手册。</p><p><code>whereis</code>  ：定位命令位置。</p><p><code>file</code> ：查看文件类型。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543393267168.png" alt="1543393267168"></p><p><code>echo</code> ： 打印到标准输出。</p><p><code>$PATH</code> ： 环境变量路径。</p><p><code>$LANG</code> ：系统语言。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543393742900.png" alt="1543393742900"></p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543394922834.png" alt="1543394922834"></p><p><code>ps -ef</code> ： 显示所有进程。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543394106383.png" alt="1543394106383"></p><p><code>echo $$</code> ： 当前shell的PID。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543404790980.png" alt="1543404790980"></p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543404810070.png" alt="1543404810070"></p><p><code>man</code> ： 使用帮助手册。</p><p>​    1：用户命令(/bin, /usr/bin, /usr/local/bin)</p><p>​    2：系统调用</p><p>​    3：库用户</p><p>​    4：特殊文件(设备文件)</p><p>​    5：文件格式(配置文件的语法)</p><p>​    6：游戏</p><p>​    7：杂项(Miscellaneous)</p><p>​    8: 管理命令(/sbin, /usr/sbin, /usr/local/sbin)</p><p>如<code>ls</code> 命令为用户命令。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543405468245.png" alt="1543405468245"></p><h2 id="4-文件系统"><a href="#4-文件系统" class="headerlink" title="4.文件系统"></a>4.文件系统</h2><p>查看根目录的目录结构<code>ll</code></p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1543459021711.png" alt="1543459021711"></p><p>/boot: 系统启动相关的文件，如内核、initrd，以及grub(bootloader)</p><p>/dev: 设备文件  </p><p>/etc：配置文件</p><p>/home：用户的家目录，每一个用户的家目录通常默认为/home/USERNAME</p><p>/root：管理员的家目录；</p><p>/lib：库文件</p><p>/media：挂载点目录，移动设备</p><p>/mnt：挂载点目录，额外的临时文件系统</p><p>/opt：可选目录，第三方程序的安装目录</p><p>/proc：伪文件系统，内核映射文件</p><p>/sys：伪文件系统，跟硬件设备相关的属性映射文件</p><p>/tmp：临时文件, /var/tmp</p><p>/var：可变化的文件</p><p>/bin: 可执行文件, 用户命令</p><p>/sbin：管理命令</p><h2 id="5-文件系统命令"><a href="#5-文件系统命令" class="headerlink" title="5.文件系统命令"></a>5.文件系统命令</h2><p><code>df</code> ：显示磁盘使用情况</p><p><code>du</code> ：显示文件系统使用情况</p><p><code>ls</code> ：显示目录</p><p><code>cd</code> ：切换工作目录</p><p><code>pwd</code>：显示当前工作目录</p><p><code>mkdir</code> ：创建目录</p><p><code>rm</code> ：删除</p><p><code>cp</code> ：拷贝</p><p><code>mv</code> ：移动</p><p><code>ln </code> ：链接</p><p><code>stat</code> ：元数据</p><p><code>touch</code> ：创建文件</p><h2 id="6-文本操作命令"><a href="#6-文本操作命令" class="headerlink" title="6.文本操作命令"></a>6.文本操作命令</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E8%AF%BB%E5%8F%96/"/>
      <url>2021/05/02/%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="数据文件存储和读取"><a href="#数据文件存储和读取" class="headerlink" title="数据文件存储和读取"></a>数据文件存储和读取</h1><p>一个完整的数据分析流程，通常会经历 4 个大的步骤，分别是：<strong>数据采集读取 → 数据清洁及预处理 → 数据建模 → 数据分析报告</strong>。你可以看到，数据采集读取是整个分析流程的第一步，也是非常重要的一步。因为，数据是不可能凭空出现的。只有手中有数据，我们才可以执行后面的步骤。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1547556244052.png" alt="1547556244052"></p><h2 id="常用数据文件格式"><a href="#常用数据文件格式" class="headerlink" title="常用数据文件格式"></a>常用数据文件格式</h2><p>数据文件是非常常见的数据储存方式，适合于小规模数据。例如，公司通过调查问卷的方式收集了大量的数据，一般导出之后就是一个数据文件。再例如，数据分析人员一般没有权限直接连接公司数据库，那么你拿到手中的数据就可能是数据库管理员给你导出之后的数据文件。</p><p>当我们使用 Python 读取数据文件时，首先推荐的就是通过 Pandas 完成，Pandas 几乎支持所有常见的数据文件格式。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1547556404989.png" alt="1547556404989"></p><h2 id="Excel-和-CSV-格式"><a href="#Excel-和-CSV-格式" class="headerlink" title="Excel 和 CSV 格式"></a>Excel 和 CSV 格式</h2><p>上面的表格中，相信你最熟悉的是 Excel 表格数据文件。由于 Excel 表格有最大的行数储存限制（16,384 列 × 1,048,576 行），所以更多时候我们会使用 CSV 来储存表格数据。</p><p>CSV 的英文是 Comma-Separated Values，其实就是通过字符分割数据并以纯文本形式存储。这里的分割字符我们一般会使用逗号，所以往往也称 CSV 文件为逗号分隔符文件。纯文本意味着该文件是一个字符序列，不含必须像二进制数字那样被解读的数据，也没有最大行数的储存限制。</p><p>下面，我们尝试读取 Excel 和 CSV 格式的示例数据文件。首先，我们需要生成不同类型的数据示例文件。下面这段代码直接点击运行即可，将会在目录下方生成两个最常用的数据文件 <code>test.csv</code> 和 <code>test.xlsx</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成示例数据</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: np.random.randn(<span class="number">10</span>), <span class="string">&#x27;B&#x27;</span>: np.random.randn(<span class="number">10</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据文件</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;test.csv&#x27;</span>, index=<span class="literal">None</span>)  <span class="comment"># CSV</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;test.xlsx&#x27;</span>, index=<span class="literal">None</span>)  <span class="comment"># EXCEL</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*****示例文件写入成功*****&quot;</span>)</span><br></pre></td></tr></table></figure><p>下面，我们学习使用 Pandas 读取文件的方法，直接运用上面表格中的 API 即可。CSV 文件读取是 <code>read_csv</code>，而 Excel 文件读取是 <code>read_excel</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1547556789236.png" alt="1547556789236"></p><p>当你读取 Excel 文件时，首先需要安装 <code>openpyxl</code> 模块，不然就会报错。安装该模块的命令为：<code>pip install openpyxl</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_excel(<span class="string">&#x27;test.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1547556857467.png" alt="1547556857467"></p><p>通过 Pandas 读取处理的数据会自动以表格样式呈现，这也就是 Pandas 特有的数据格式：DataFrame。在学习数据分析的生涯中，DataFrame 将会成为你最容易听到的名词之一。Pandas 的所有数据操作都是针对于 DataFrame 进行。</p><p>特别地，我们会将 Pandas 中的一维数据类型称之为 Series，三维数据称之为 Panel。但实际上，它们都可以看作是特殊的 DataFrame。</p><h2 id="HDF5-格式"><a href="#HDF5-格式" class="headerlink" title="HDF5 格式"></a>HDF5 格式</h2><p>HDF（英语：Hierarchical Data Format）指一种为存储和处理大容量科学数据设计的文件格式及相应库文件。HDF5 格式的特点在于能存储多个数据集，并且支持 <code>metadata</code>。</p><p>HDF5 文件包含两种基本数据对象：</p><ul><li>群组（group）：类似文件夹，可以包含多个数据集或下级群组。</li><li>数据集（dataset）：数据内容，可以是多维数组，也可以是更复杂的数据类型。</li></ul><p>群组和数据集都支持元数据 <code>metadata</code>，用户可以自定义其属性，提供附加信息。元数据类似于「数据的数据」，它能够用来说明数据的特征和其他属性。</p><p>HDF5 的好处在于，你不仅可以使用 Python 存储和读取，目前还被 Java，MATLAB/Scilab，Octave，IDL，Julia, R 等语言或商业软件支持。</p><p>下面，我们同样尝试使用 Pandas 来存储和读取 HDF5 数据。和 Excel 文件读取相似，我们需要先安装一个依赖模块 PyTables，命令为：<code>pip install tables</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: np.random.randn(<span class="number">10</span>), <span class="string">&#x27;B&#x27;</span>: np.random.randn(<span class="number">10</span>)&#125;)  <span class="comment"># 随机数据</span></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;C&#x27;</span>: np.random.randn(<span class="number">10</span>), <span class="string">&#x27;D&#x27;</span>: np.random.randn(<span class="number">10</span>)&#125;)  <span class="comment"># 随机数据</span></span><br><span class="line"></span><br><span class="line">df1.to_hdf(<span class="string">&#x27;test.h5&#x27;</span>, key=<span class="string">&#x27;df1&#x27;</span>)  <span class="comment"># 存储 df1</span></span><br><span class="line">df2.to_hdf(<span class="string">&#x27;test.h5&#x27;</span>, key=<span class="string">&#x27;df2&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;table&#x27;</span>)  <span class="comment"># 存储 df2 </span></span><br></pre></td></tr></table></figure><p>上面的代码中，我们通过指定 <code>key</code> 向 HDF 文件中存储了 2 个不同的数据集 <code>df1</code> 和 <code>df2</code>。那么，接下来我们尝试读取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_hdf(<span class="string">&#x27;test.h5&#x27;</span>, key=<span class="string">&#x27;df1&#x27;</span>)  <span class="comment"># 读取 df1 </span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1547557062683.png" alt="1547557062683"></p><p><code>df2</code> 后面指定了 <code>format=&#39;table&#39;</code> 参数。这是因为，HDF 支持两种存储架构：fixed 和table。默认为 <code>fixed</code>，因为其读取速度更快，但是 <code>table</code> 却支持查询操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取 df2 中 index &lt; 5 的数据</span></span><br><span class="line">pd.read_hdf(<span class="string">&#x27;test.h5&#x27;</span>, key=<span class="string">&#x27;df2&#x27;</span>, where=[<span class="string">&#x27;index &lt; 5&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1547557133387.png" alt="1547557133387"></p><h2 id="JSON-格式"><a href="#JSON-格式" class="headerlink" title="JSON 格式"></a>JSON 格式</h2><p>JSON（英文：JavaScript Object Notation）是一种由道格拉斯·克罗克福特构想和设计、轻量级的数据交换语言，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管 JSON 是 JavaScript 的一个子集，但 JSON 是独立于语言的文本格式。</p><p>JSON 数据格式与语言无关，脱胎于 JavaScript，但目前很多编程语言都支持 JSON 格式数据的生成和解析。JSON 的官方 MIME 类型是 application/json，文件扩展名是 <code>.json</code>。</p><p>一段 JSON 的示例数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">obj = &quot;&quot;&quot; </span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;aqi&quot;</span>: <span class="number">46</span>,</span><br><span class="line"><span class="attr">&quot;area&quot;</span>: <span class="string">&quot;成都&quot;</span>,</span><br><span class="line"><span class="attr">&quot;pm2_5&quot;</span>: <span class="number">32</span>,</span><br><span class="line"><span class="attr">&quot;pm2_5_24h&quot;</span>: <span class="number">33</span>,</span><br><span class="line"><span class="attr">&quot;position_name&quot;</span>: <span class="string">&quot;金泉两河&quot;</span>,</span><br><span class="line"><span class="attr">&quot;primary_pollutant&quot;</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">&quot;quality&quot;</span>: <span class="string">&quot;优&quot;</span>,</span><br><span class="line"><span class="attr">&quot;station_code&quot;</span>: <span class="string">&quot;1431A&quot;</span>,</span><br><span class="line"><span class="attr">&quot;time_point&quot;</span>: <span class="string">&quot;2018-09-05T09:00:00Z&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;aqi&quot;</span>: <span class="number">29</span>,</span><br><span class="line"><span class="attr">&quot;area&quot;</span>: <span class="string">&quot;成都&quot;</span>,</span><br><span class="line"><span class="attr">&quot;pm2_5&quot;</span>: <span class="number">20</span>,</span><br><span class="line"><span class="attr">&quot;pm2_5_24h&quot;</span>: <span class="number">26</span>,</span><br><span class="line"><span class="attr">&quot;position_name&quot;</span>: <span class="string">&quot;十里店&quot;</span>,</span><br><span class="line"><span class="attr">&quot;primary_pollutant&quot;</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">&quot;quality&quot;</span>: <span class="string">&quot;优&quot;</span>,</span><br><span class="line"><span class="attr">&quot;station_code&quot;</span>: <span class="string">&quot;1432A&quot;</span>,</span><br><span class="line"><span class="attr">&quot;time_point&quot;</span>: <span class="string">&quot;2018-09-05T09:00:00Z&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>JSON 数据中 <code>key</code> 必须是字符串类型，缺失值用 <code>null</code> 表示。其中还可能包含的基本类型有：字典，列表，字符串，数值，布尔值等。</p><p>Pandas 中的 <code>read_json</code> 往往能直接吧 JSON 解析为 DataFrame。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1547557312295.png" alt="1547557312295"></p><p>Python 中有许多能够储存和解析 JSON 的库，这里推荐使用内建库 <code>json</code>。上面给出的 <code>obj</code> 其实是字符串，如果想要将其转换为 Python 的数据类型（Python Object），那么就可以使用 <code>json.loads(obj)</code> 完成。</p><p><img src="C:\Users\miao\AppData\Roaming\Typora\typora-user-images\1547557373524.png" alt="1547557373524"></p><p>读取「金泉两河」地名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="number">0</span>][<span class="string">&#x27;position_name&#x27;</span>]</span><br></pre></td></tr></table></figure><p>除此之外，使用 <code>json.dumps</code> 可以把 Python Object 转换为 JSON 类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dumps(obj)</span><br></pre></td></tr></table></figure><h2 id="read-操作参数详解"><a href="#read-操作参数详解" class="headerlink" title="read_ 操作参数详解"></a><code>read_</code> 操作参数详解</h2><p>Pandas 中的 <code>read_</code> 操作可不仅仅是加载数据文件这么简单，它带有的一些参数可以实现更加个性化的读取结果。我们以 <code>pandas.read_csv()</code> 的 API 为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.read_csv(filepath_or_buffer, sep=<span class="string">&#x27;, &#x27;</span>, delimiter=<span class="literal">None</span>, header=<span class="string">&#x27;infer&#x27;</span>, names=<span class="literal">None</span>, index_col=<span class="literal">None</span>, usecols=<span class="literal">None</span>, squeeze=<span class="literal">False</span>, prefix=<span class="literal">None</span>, mangle_dupe_cols=<span class="literal">True</span>, dtype=<span class="literal">None</span>, engine=<span class="literal">None</span>, converters=<span class="literal">None</span>, true_values=<span class="literal">None</span>, false_values=<span class="literal">None</span>, skipinitialspace=<span class="literal">False</span>, skiprows=<span class="literal">None</span>, nrows=<span class="literal">None</span>, na_values=<span class="literal">None</span>, keep_default_na=<span class="literal">True</span>, na_filter=<span class="literal">True</span>, verbose=<span class="literal">False</span>, skip_blank_lines=<span class="literal">True</span>, parse_dates=<span class="literal">False</span>, infer_datetime_format=<span class="literal">False</span>, keep_date_col=<span class="literal">False</span>, date_parser=<span class="literal">None</span>, dayfirst=<span class="literal">False</span>, iterator=<span class="literal">False</span>, chunksize=<span class="literal">None</span>, compression=<span class="string">&#x27;infer&#x27;</span>, thousands=<span class="literal">None</span>, decimal=<span class="string">b&#x27;.&#x27;</span>, lineterminator=<span class="literal">None</span>, quotechar=<span class="string">&#x27;&quot;&#x27;</span>, quoting=<span class="number">0</span>, escapechar=<span class="literal">None</span>, comment=<span class="literal">None</span>, encoding=<span class="literal">None</span>, dialect=<span class="literal">None</span>, tupleize_cols=<span class="literal">None</span>, error_bad_lines=<span class="literal">True</span>, warn_bad_lines=<span class="literal">True</span>, skipfooter=<span class="number">0</span>, doublequote=<span class="literal">True</span>, delim_whitespace=<span class="literal">False</span>, low_memory=<span class="literal">True</span>, memory_map=<span class="literal">False</span>, float_precision=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>path</code>：路径不仅仅可以读取本地文件，还支持远程 URL 链接。</li><li><code>sep</code>：支持按特定字符分割。</li><li><code>header</code>：可以指定某一行为列名，默认是第一行。</li><li><code>names</code>：自定义列名。</li><li><code>skiprows</code>：指定忽略某些行。</li><li><code>na_values</code>：对空值进行指定替换操作。</li><li><code>parse_dates</code>：尝试将数据解析为日期。</li><li><code>nrows</code>：读取指定行数的数据。</li><li><code>chunksize</code>：指定分块读取数据大小。</li><li><code>encoding</code>：指定文件编码。</li></ul><p>上面的这些参数使得 Pandas 的数据文件读取功能非常强大。例如，如果你的 CSV 文件是使用分号 <code>;</code> 而不是逗号 <code>,</code> 分割，那么就可以通过 <code>sep=&#39;;&#39;</code> 让数据加载为正常的 DataFrame 格式。</p><p>除此之外，像 <code>skiprows</code> 非常常用，它可以指定忽略某些行。，使得在加载数据时就可以对数据实现过滤，面对庞大且加载较慢的数据文件时特别好用</p><h2 id="分块读取数据"><a href="#分块读取数据" class="headerlink" title="分块读取数据"></a>分块读取数据</h2><p>这里，我们特别介绍一下分块读取的方法。在很多时候，手中的数据集都非常大。例如当我们直接读取一个 GB 级别的 CSV 文件时，不仅速度很慢，还有可能因为内存不足而报错。此时，通过分块读取的方式加载数据文件就非常方便了。</p><p>通过上面的 <code>read_</code> 参数可以看出，分块读取需要指定 <code>chunksize</code>，也就是每一块的大小。</p><p>chunker<code>返回的</code>pandas.io.parsers.TextFileReader<code>是一个可迭代对象。你可以通过</code>get_chunk()` 逐次返回每一个块状数据的内容。你可以尝试多次运行下方单元格，以查看每次迭代的结果。分块读取是解决大文件读取慢的有效手段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chunker = pd.read_csv(<span class="string">&quot;test.csv&quot;</span>, chunksize=<span class="number">2</span>)</span><br><span class="line">chunker</span><br><span class="line">chunker.get_chunk() <span class="comment"># 迭代返回分块数据内容</span></span><br></pre></td></tr></table></figure><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>本次实验中，我们重点介绍了实验 Pandas 读取和存储数据的方法。对常用的 Excel, CSV, HDF5, JSON 等数据格式做了介绍。同时，介绍了快速解析网页表格数据的方法。实验的最后，介绍了分块读取数据的方法，以便于读取较大的数据文件。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/08/hello-world/"/>
      <url>2021/04/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
